['from PyQt5.QtGui import *\n', 'from PyQt5.QtWidgets import *\n', 'from PyQt5.QtCore import *\n', '\n', 'import os\n', 'import random\n', '\n', 'WINDOW_SIZE = 840, 600\n', '\n', 'CARD_DIMENSIONS = QSize(80, 116)\n', 'CARD_RECT = QRect(0, 0, 80, 116)\n', 'CARD_SPACING_X = 110\n', "CARD_BACK = QImage(os.path.join('images', 'back.png'))\n", '\n', 'DEAL_RECT = QRect(30, 30, 110, 140)\n', '\n', 'OFFSET_X = 50\n', 'OFFSET_Y = 50\n', 'WORK_STACK_Y = 200\n', '\n', 'SIDE_FACE = 0\n', 'SIDE_BACK = 1\n', '\n', 'BOUNCE_ENERGY = 0.8\n', '\n', '# We store cards as numbers 1-13, since we only need\n', '# to know their order for solitaire.\n', 'SUITS = ["C", "S", "H", "D"]\n', '\n', '\n', 'class Signals(QObject):\n', '    complete = pyqtSignal()\n', '    clicked = pyqtSignal()\n', '    doubleclicked = pyqtSignal()\n', '\n', '\n', 'class Card(QGraphicsPixmapItem):\n', '\n', '    def __init__(self, value, suit, *args, **kwargs):\n', '        super(Card, self).__init__(*args, **kwargs)\n', '\n', '        self.signals = Signals()\n', '\n', '        self.stack = None  # Stack this card currently is in.\n', '        self.child = None  # Card stacked on this one (for work deck).\n', '\n', '        # Store the value & suit of the cards internal to it.\n', '        self.value = value\n', '        self.suit = suit\n', '        self.side = None\n', '\n', '        # For end animation only.\n', '        self.vector = None\n', '\n', '        # Cards have no internal transparent areas, so we can use this faster method.\n', '        self.setShapeMode(QGraphicsPixmapItem.BoundingRectShape)\n', '        self.setFlag(QGraphicsItem.ItemIsMovable)\n', '        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges)\n', '\n', '        self.load_images()\n', '\n', '    def load_images(self):\n', '        self.face = QPixmap(\n', "            os.path.join('cards', '%s%s.png' % (self.value, self.suit))\n", '        )\n', '\n', '        self.back = QPixmap(\n', "            os.path.join('images', 'back.png')\n", '        )\n', '\n', '    def turn_face_up(self):\n', '        self.side = SIDE_FACE\n', '        self.setPixmap(self.face)\n', '\n', '    def turn_back_up(self):\n', '        self.side = SIDE_BACK\n', '        self.setPixmap(self.back)\n', '\n', '    @property\n', '    def is_face_up(self):\n', '        return self.side == SIDE_FACE\n', '\n', '    @property\n', '    def color(self):\n', "        return 'r' if self.suit in ('H', 'D') else 'b'\n", '\n', '    def mousePressEvent(self, e):\n', '        if not self.is_face_up and self.stack.cards[-1] == self:\n', '            self.turn_face_up()  # We can do this without checking.\n', '            e.accept()\n', '            return\n', '\n', '        if self.stack and not self.stack.is_free_card(self):\n', '            e.ignore()\n', '            return\n', '\n', '        self.stack.activate()\n', '\n', '        e.accept()\n', '\n', '        super(Card, self).mouseReleaseEvent(e)\n', '\n', '    def mouseReleaseEvent(self, e):\n', '        self.stack.deactivate()\n', '\n', '        items = self.collidingItems()\n', '        if items:\n', '            # Find the topmost item from a different stack:\n', '            for item in items:\n', '                if ((isinstance(item, Card) and item.stack != self.stack) or\n', '                    (isinstance(item, StackBase) and item != self.stack)):\n', '\n', '                    if item.stack.is_valid_drop(self):\n', '                        # Remove card + all children from previous stack, add to the new.\n', '                        # Note: the only place there will be children is on a workstack.\n', '                        cards = self.stack.remove_card(self)\n', '                        item.stack.add_cards(cards)\n', '                        break\n', '\n', "        # Refresh this card's stack, pulling it back if it was dropped.\n", '        self.stack.update()\n', '\n', '        super(Card, self).mouseReleaseEvent(e)\n', '\n', '    def mouseDoubleClickEvent(self, e):\n', '        if self.stack.is_free_card(self):\n', '            self.signals.doubleclicked.emit()\n', '            e.accept()\n', '\n', '        super(Card, self).mouseDoubleClickEvent(e)\n', '\n', '\n', 'class StackBase(QGraphicsRectItem):\n', '\n', '    def __init__(self, *args, **kwargs):\n', '        super(StackBase, self).__init__(*args, **kwargs)\n', '\n', '        self.setRect(QRectF(CARD_RECT))\n', '        self.setZValue(-1)\n', '\n', '        # Cards on this deck, in order.\n', '        self.cards = []\n', '\n', '        # Store a self ref, so the collision logic can handle cards and\n', '        # stacks with the same approach.\n', '        self.stack = self\n', '        self.setup()\n', '        self.reset()\n', '\n', '    def setup(self):\n', '        pass\n', '\n', '    def reset(self):\n', '        self.remove_all_cards()\n', '\n', '    def update(self):\n', '        for n, card in enumerate(self.cards):\n', '            card.setPos( self.pos() + QPointF(n * self.offset_x, n * self.offset_y))\n', '            card.setZValue(n)\n', '\n', '    def activate(self):\n', '        pass\n', '\n', '    def deactivate(self):\n', '        pass\n', '\n', '    def add_card(self, card, update=True):\n', '        card.stack = self\n', '        self.cards.append(card)\n', '        if update:\n', '            self.update()\n', '\n', '    def add_cards(self, cards):\n', '        for card in cards:\n', '            self.add_card(card, update=False)\n', '        self.update()\n', '\n', '    def remove_card(self, card):\n', '        card.stack = None\n', '        self.cards.remove(card)\n', '        self.update()\n', '        return [card] # Returns a list, as WorkStack must return children\n', '\n', '    def remove_all_cards(self):\n', '        for card in self.cards[:]:\n', '            card.stack = None\n', '        self.cards = []\n', '\n', '    def is_valid_drop(self, card):\n', '        return True\n', '\n', '    def is_free_card(self, card):\n', '        return False\n', '\n', '\n', 'class DeckStack(StackBase):\n', '\n', '    offset_x = -0.2\n', '    offset_y = -0.3\n', '\n', '    restack_counter = 0\n', '\n', '    def reset(self):\n', '        super(DeckStack, self).reset()\n', '        self.restack_counter = 0\n', '        self.set_color(Qt.green)\n', '\n', '    def stack_cards(self, cards):\n', '        for card in cards:\n', '            self.add_card(card)\n', '            card.turn_back_up()\n', '\n', '    def can_restack(self, n_rounds=3):\n', '        return n_rounds is None or self.restack_counter < n_rounds-1\n', '\n', '    def update_stack_status(self, n_rounds):\n', '        if not self.can_restack(n_rounds):\n', '            self.set_color(Qt.red)\n', '        else:\n', '            # We only need this if players change the round number during a game.\n', '            self.set_color(Qt.green)\n', '\n', '    def restack(self, fromstack):\n', '        self.restack_counter += 1\n', '\n', "        # We need to slice as we're adding to the list, reverse to stack back\n", '        # in the original order.\n', '        for card in fromstack.cards[::-1]:\n', '            fromstack.remove_card(card)\n', '            self.add_card(card)\n', '            card.turn_back_up()\n', '\n', '    def take_top_card(self):\n', '        try:\n', '            card = self.cards[-1]\n', '            self.remove_card(card)\n', '            return card\n', '        except IndexError:\n', '            pass\n', '\n', '    def set_color(self, color):\n', '        color = QColor(color)\n', '        color.setAlpha(50)\n', '        brush = QBrush(color)\n', '        self.setBrush(brush)\n', '        self.setPen(QPen(Qt.NoPen))\n', '\n', '    def is_valid_drop(self, card):\n', '        return False\n', '\n', '\n', 'class DealStack(StackBase):\n', '\n', '    offset_x = 20\n', '    offset_y = 0\n', '\n', '    spread_from = 0\n', '\n', '    def setup(self):\n', '        self.setPen(QPen(Qt.NoPen))\n', '        color = QColor(Qt.black)\n', '        color.setAlpha(50)\n', '        brush = QBrush(color)\n', '        self.setBrush(brush)\n', '\n', '    def reset(self):\n', '        super(DealStack, self).reset()\n', '        self.spread_from = 0  # Card index to start spreading cards out.\n', '\n', '    def is_valid_drop(self, card):\n', '        return False\n', '\n', '    def is_free_card(self, card):\n', '        return card == self.cards[-1]\n', '\n', '    def update(self):\n', '        # Only spread the top 3 cards\n', '        offset_x = 0\n', '        for n, card in enumerate(self.cards):\n', '            card.setPos(self.pos() + QPointF(offset_x, 0))\n', '            card.setZValue(n)\n', '\n', '            if n >= self.spread_from:\n', '                offset_x = offset_x + self.offset_x\n', '\n', '\n', 'class WorkStack(StackBase):\n', '\n', '    offset_x = 0\n', '    offset_y = 15\n', '    offset_y_back = 5\n', '\n', '    def setup(self):\n', '        self.setPen(QPen(Qt.NoPen))\n', '        color = QColor(Qt.black)\n', '        color.setAlpha(50)\n', '        brush = QBrush(color)\n', '        self.setBrush(brush)\n', '\n', '    def activate(self):\n', '        # Raise z-value of this stack so children float above all other cards.\n', '        self.setZValue(1000)\n', '\n', '    def deactivate(self):\n', '        self.setZValue(-1)\n', '\n', '    def is_valid_drop(self, card):\n', '        if not self.cards:\n', '            return True\n', '\n', '        if (card.color != self.cards[-1].color and\n', '            card.value == self.cards[-1].value -1):\n', '            return True\n', '\n', '        return False\n', '\n', '    def is_free_card(self, card):\n', '        return card.is_face_up #self.cards and card == self.cards[-1]\n', '\n', '    def add_card(self, card, update=True):\n', '        if self.cards:\n', '            card.setParentItem(self.cards[-1])\n', '        else:\n', '            card.setParentItem(self)\n', '\n', '        super(WorkStack, self).add_card(card, update=update)\n', '\n', '    def remove_card(self, card):\n', '        index = self.cards.index(card)\n', '        self.cards, cards = self.cards[:index], self.cards[index:]\n', '\n', '        for card in cards:\n', '            # Remove card and all children, returning a list of cards removed in order.\n', '            card.setParentItem(None)\n', '            card.stack = None\n', '\n', '        self.update()\n', '        return cards\n', '\n', '    def remove_all_cards(self):\n', '        for card in self.cards[:]:\n', '            card.setParentItem(None)\n', '            card.stack = None\n', '        self.cards = []\n', '\n', '    def update(self):\n', '        self.stack.setZValue(-1) # Reset this stack the the background.\n', '        # Only spread the top 3 cards\n', '        offset_y = 0\n', '        for n, card in enumerate(self.cards):\n', '            card.setPos(QPointF(0, offset_y))\n', '\n', '            if card.is_face_up:\n', '                offset_y = self.offset_y\n', '            else:\n', '                offset_y = self.offset_y_back\n', '\n', '\n', 'class DropStack(StackBase):\n', '\n', '    offset_x = -0.2\n', '    offset_y = -0.3\n', '\n', '    suit = None\n', '    value = 0\n', '\n', '    def setup(self):\n', '        self.signals = Signals()\n', '        color = QColor(Qt.blue)\n', '        color.setAlpha(50)\n', '        pen = QPen(color)\n', '        pen.setWidth(5)\n', '        self.setPen(pen)\n', '\n', '    def reset(self):\n', '        super(DropStack, self).reset()\n', '        self.suit = None\n', '        self.value = 0\n', '\n', '    def is_valid_drop(self, card):\n', '        if ((self.suit is None or card.suit == self.suit) and\n', '                (card.value == self.value + 1)):\n', '            return True\n', '\n', '        return False\n', '\n', '    def add_card(self, card, update=True):\n', '        super(DropStack, self).add_card(card, update=update)\n', '        self.suit = card.suit\n', '        self.value = self.cards[-1].value\n', '\n', '        if self.is_complete:\n', '            self.signals.complete.emit()\n', '\n', '    def remove_card(self, card):\n', '        super(DropStack, self).remove_card(card)\n', '        self.value = self.cards[-1].value if self.cards else 0\n', '\n', '    @property\n', '    def is_complete(self):\n', '        return self.value == 13\n', '\n', '\n', 'class DealTrigger(QGraphicsRectItem):\n', '\n', '    def __init__(self, *args, **kwargs):\n', '        super(DealTrigger, self).__init__(*args, **kwargs)\n', '        self.setRect(QRectF(DEAL_RECT))\n', '        self.setZValue(1000)\n', '\n', '        pen = QPen(Qt.NoPen)\n', '        self.setPen(pen)\n', '\n', '        self.signals = Signals()\n', '\n', '    def mousePressEvent(self, e):\n', '        self.signals.clicked.emit()\n', '\n', '\n', 'class AnimationCover(QGraphicsRectItem):\n', '    def __init__(self, *args, **kwargs):\n', '        super(AnimationCover, self).__init__(*args, **kwargs)\n', '        self.setRect(QRectF(0, 0, *WINDOW_SIZE))\n', '        self.setZValue(5000)\n', '        pen = QPen(Qt.NoPen)\n', '        self.setPen(pen)\n', '\n', '    def mousePressEvent(self, e):\n', '        e.accept()\n', '\n', '\n', 'class MainWindow(QMainWindow):\n', '\n', '    def __init__(self, *args, **kwargs):\n', '        super(MainWindow, self).__init__(*args, **kwargs)\n', '\n', '        view = QGraphicsView()\n', '        self.scene = QGraphicsScene()\n', '        self.scene.setSceneRect(QRectF(0, 0, *WINDOW_SIZE))\n', '\n', "        felt = QBrush(QPixmap(os.path.join('images','felt.png')))\n", '        self.scene.setBackgroundBrush(felt)\n', '\n', '        name = QGraphicsPixmapItem()\n', "        name.setPixmap(QPixmap(os.path.join('images','ronery.png')))\n", '        name.setPos(QPointF(170, 375))\n', '        self.scene.addItem(name)\n', '\n', '        view.setScene(self.scene)\n', '\n', '        # Timer for the win animation only.\n', '        self.timer = QTimer()\n', '        self.timer.setInterval(5)\n', '        self.timer.timeout.connect(self.win_animation)\n', '\n', '        self.animation_event_cover = AnimationCover()\n', '        self.scene.addItem(self.animation_event_cover)\n', '\n', '        menu = self.menuBar().addMenu("&Game")\n', '\n', '        deal_action = QAction(QIcon(os.path.join(\'images\', \'playing-card.png\')), "Deal...", self)\n', '        deal_action.triggered.connect(self.restart_game)\n', '        menu.addAction(deal_action)\n', '\n', '        menu.addSeparator()\n', '\n', '        deal1_action = QAction("1 card", self)\n', '        deal1_action.setCheckable(True)\n', '        deal1_action.triggered.connect(lambda: self.set_deal_n(1))\n', '        menu.addAction(deal1_action)\n', '\n', '        deal3_action = QAction("3 card", self)\n', '        deal3_action.setCheckable(True)\n', '        deal3_action.setChecked(True)\n', '        deal3_action.triggered.connect(lambda: self.set_deal_n(3))\n', '\n', '        menu.addAction(deal3_action)\n', '\n', '        dealgroup = QActionGroup(self)\n', '        dealgroup.addAction(deal1_action)\n', '        dealgroup.addAction(deal3_action)\n', '        dealgroup.setExclusive(True)\n', '\n', '        menu.addSeparator()\n', '\n', '        rounds3_action = QAction("3 rounds", self)\n', '        rounds3_action.setCheckable(True)\n', '        rounds3_action.setChecked(True)\n', '        rounds3_action.triggered.connect(lambda: self.set_rounds_n(3))\n', '        menu.addAction(rounds3_action)\n', '\n', '        rounds5_action = QAction("5 rounds", self)\n', '        rounds5_action.setCheckable(True)\n', '        rounds5_action.triggered.connect(lambda: self.set_rounds_n(5))\n', '        menu.addAction(rounds5_action)\n', '\n', '        roundsu_action = QAction("Unlimited rounds", self)\n', '        roundsu_action.setCheckable(True)\n', '        roundsu_action.triggered.connect(lambda: self.set_rounds_n(None))\n', '        menu.addAction(roundsu_action)\n', '\n', '        roundgroup = QActionGroup(self)\n', '        roundgroup.addAction(rounds3_action)\n', '        roundgroup.addAction(rounds5_action)\n', '        roundgroup.addAction(roundsu_action)\n', '        roundgroup.setExclusive(True)\n', '\n', '        menu.addSeparator()\n', '\n', '        quit_action = QAction("Quit", self)\n', '        quit_action.triggered.connect(self.quit)\n', '        menu.addAction(quit_action)\n', '\n', '        self.deck = []\n', '        self.deal_n = 3  # Number of cards to deal each time\n', '        self.rounds_n = 3  # Number of rounds (restacks) before end.\n', '\n', '        for suit in SUITS:\n', '            for value in range(1, 14):\n', '                card = Card(value, suit)\n', '                self.deck.append(card)\n', '                self.scene.addItem(card)\n', '                card.signals.doubleclicked.connect(lambda card=card: self.auto_drop_card(card))\n', '\n', '        self.setCentralWidget(view)\n', '        self.setFixedSize(*WINDOW_SIZE)\n', '\n', '        self.deckstack = DeckStack()\n', '        self.deckstack.setPos(OFFSET_X, OFFSET_Y)\n', '        self.scene.addItem(self.deckstack)\n', '\n', '        # Set up the working locations.\n', '        self.works = []\n', '        for n in range(7):\n', '            stack = WorkStack()\n', '            stack.setPos(OFFSET_X + CARD_SPACING_X*n, WORK_STACK_Y)\n', '            self.scene.addItem(stack)\n', '            self.works.append(stack)\n', '\n', '        self.drops = []\n', '        # Set up the drop locations.\n', '        for n in range(4):\n', '            stack = DropStack()\n', '            stack.setPos(OFFSET_X + CARD_SPACING_X * (3+n), OFFSET_Y)\n', '            stack.signals.complete.connect(self.check_win_condition)\n', '\n', '            self.scene.addItem(stack)\n', '            self.drops.append(stack)\n', '\n', '        # Add the deal location.\n', '        self.dealstack = DealStack()\n', '        self.dealstack.setPos(OFFSET_X + CARD_SPACING_X, OFFSET_Y)\n', '        self.scene.addItem(self.dealstack)\n', '\n', '        # Add the deal click-trigger.\n', '        dealtrigger = DealTrigger()\n', '        dealtrigger.signals.clicked.connect(self.deal)\n', '        self.scene.addItem(dealtrigger)\n', '\n', '        self.shuffle_and_stack()\n', '\n', '        self.setWindowTitle("Ronery")\n', '        self.show()\n', '\n', '    def restart_game(self):\n', '        reply = QMessageBox.question(self, "Deal again", "Are you sure you want to start a new game?",\n', '                                      QMessageBox.Yes | QMessageBox.No)\n', '\n', '        if reply == QMessageBox.Yes:\n', '            self.shuffle_and_stack()\n', '\n', '    def quit(self):\n', '        self.close()\n', '\n', '    def set_deal_n(self, n):\n', '        self.deal_n = n\n', '\n', '    def set_rounds_n(self, n):\n', '        self.rounds_n = n\n', '        self.deckstack.update_stack_status(self.rounds_n)\n', '\n', '    def shuffle_and_stack(self):\n', '        # Stop any ongoing animation.\n', '        self.timer.stop()\n', '        self.animation_event_cover.hide()\n', '\n', '        # Remove cards from all stacks.\n', '        for stack in [self.deckstack, self.dealstack] + self.drops + self.works:\n', '            stack.reset()\n', '\n', '        random.shuffle(self.deck)\n', '\n', '        # Deal out from the top of the deck, turning over the\n', '        # final card on each line.\n', '        cards = self.deck[:]\n', '        for n, workstack in enumerate(self.works, 1):\n', '            for a in range(n):\n', '                card = cards.pop()\n', '                workstack.add_card(card)\n', '                card.turn_back_up()\n', '                if a == n-1:\n', '                    card.turn_face_up()\n', '\n', '        # Ensure removed from all other stacks here.\n', '        self.deckstack.stack_cards(cards)\n', '\n', '    def deal(self):\n', '        if self.deckstack.cards:\n', '            self.dealstack.spread_from = len(self.dealstack.cards)\n', '            for n in range(self.deal_n):\n', '                card = self.deckstack.take_top_card()\n', '                if card:\n', '                    self.dealstack.add_card(card)\n', '                    card.turn_face_up()\n', '\n', '        elif self.deckstack.can_restack(self.rounds_n):\n', '            self.deckstack.restack(self.dealstack)\n', '            self.deckstack.update_stack_status(self.rounds_n)\n', '\n', '    def auto_drop_card(self, card):\n', '        for stack in self.drops:\n', '            if stack.is_valid_drop(card):\n', '                card.stack.remove_card(card)\n', '                stack.add_card(card)\n', '                break\n', '\n', '    def check_win_condition(self):\n', '        complete = all(s.is_complete for s in self.drops)\n', '        if complete:\n', '            # Add click-proof cover to play area.\n', '            self.animation_event_cover.show()\n', '            # Get the stacks of cards from the drop,stacks.\n', '            self.timer.start()\n', '\n', '    def win_animation(self):\n', '        # Start off a new card\n', '        for drop in self.drops:\n', '            if drop.cards:\n', '                card = drop.cards.pop()\n', '                if card.vector is None:\n', '                    card.vector = QPoint(-random.randint(3, 10), -random.randint(0, 10))\n', '                    break\n', '\n', '        for card in self.deck:\n', '            if card.vector is not None:\n', '                card.setPos(card.pos() + card.vector)\n', '                card.vector += QPoint(0, 1)  # Gravity\n', '                if card.pos().y() > WINDOW_SIZE[1] - CARD_DIMENSIONS.height():\n', '                    # Bounce the card, losing some energy.\n', '                    card.vector = QPoint(card.vector.x(), -max(1, int(card.vector.y() * BOUNCE_ENERGY)) )\n', '                    # Bump back up to base of screen.\n', '                    card.setPos(card.pos().x(), WINDOW_SIZE[1] - CARD_DIMENSIONS.height())\n', '\n', '                if card.pos().x() < - CARD_DIMENSIONS.width():\n', '                    card.vector = None\n', '                    # Put the card back where it started.\n', '                    card.stack.add_card(card)\n', '\n', '\n', '\n', '\n', '\n', "if __name__ == '__main__':\n", '\n', '    app = QApplication([])\n', '    window = MainWindow()\n', '    app.exec_()']
['#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)\n', '\n', '# URL for MAST data access\n', '\n', "    url = 'http://archive.stsci.edu/kepler/data_search/search.php?'\n", "    url += 'action=Search'\n", "    url += '&max_records=100000'\n", "    url += '&verb=3'\n", "    url += '&ktc_investigation_id=' + invid\n", "    url += '&ktc_target_type[]=LC'\n", "    url += '&ktc_target_type[]=SC'\n", "    url += '&outputformat=CSV'\n", '\n', '# retrieve results from MAST\n', '\n', '    lines = urllib.urlopen(url)\n', '\n', '# extract metadata from CSV\n', '\n', "    print '\\n%4s %9s %7s %5s %2s %10s %10s %10s' % \\\n", "        ('#', 'KepID', 'InvID', 'KpMag', 'Md', 'Start', 'Stop', 'Release')\n", '    kepid = []; invid = []; mode = []\n', '    ra = []; dec = []; kepmag = []\n', '    start = []; stop = []; release = []\n', '    for line in lines:\n', "        line = line.strip().split(',')\n", '        if (len(line[0]) > 0 and \n', "            'Kepler' not in line[0] and \n", "            'integer' not in line[0] and\n", "            'no rows found' not in line[0]):\n", "            GregStart = line[7][:10].split('-')\n", "            GregStop = line[8][:10].split('-')\n", '            JDstart = Greg2JD(int(GregStart[0]),int(GregStart[1]),int(GregStart[2]))\n', '            JDstop = Greg2JD(int(GregStop[0]),int(GregStop[1]),int(GregStop[2]))\n', '            if (JDstart > Qstart and JDstop < Qstop):\n', '                kepid.append(line[0])\n', '                invid.append(line[1])\n', '                kepmag.append(float(line[22]))\n', '                mode.append(line[6])\n', '                ra.append(line[4])\n', '                dec.append(line[5])\n', '                start.append(line[7])\n', '                stop.append(line[8])\n', '                release.append(line[9])\n', "                print '%4d %9s %7s %5.2f %2s %10s %10s %10s' % \\\n", '                    (len(kepid), kepid[-1], invid[-1], kepmag[-1], mode[-1], \n', '                     start[-1][:10], stop[-1][:10], release[-1][:10])\n', '    if (len(kepid) == 0):\n', "        print '\\nNo data available as of ' + time.asctime(time.localtime())\n", '    else:\n', "        print '\\n' + time.asctime(time.localtime())\n", '\n', '    return kepid, invid, kepmag, mode, start, stop, release\n', '\n', 'def usage():\n', '\n', "    print ' -------------------------------------------------------------------------'\n", "    print ' Martin Still (martin.d.still@nasa.gov) NASA Ames Nov 11, 2009'\n", "    print ' '\n", "    print ' Find all quarter data associated with an investigation ID within the MAST'\n", "    print ' archive.'\n", "    print ' '\n", "    print ' Typical usage:'\n", "    print ' KepInvestigationAtMAST.py --invid=GO10003 --quarter=1'\n", "    print ' '\n", "    print ' --invid  Investigation ID number of GO program'\n", "    print ' --quarter  Kepler quarter (integer number)'\n", "    print ' -------------------------------------------------------------------------'\n", "    sys.exit(' ')\n", '\n', '#-------------------------------\n', 'if __name__ == "__main__":\n', '    main()\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '#ningi\n', '\n', 'HELLLOOcancerOOOO']
['#!/usr/local/bin/python\n', '\n', '# change above line to point to local \n', '# python executable\n', '\n', 'import urllib, urlparse, string, time\n', ' \n', '\n', '# create URL with desired search parameters\n', '\n', 'url = "http://archive.stsci.edu/pointings/search.php?"\n', 'url = url + "primary=ACS&outputformat=CSV"\n', 'url = url + "&pnt_ucountp=%3C5&pnt_icountp=%3E1&bao=and"\n', 'url = url + "&galactic=Above&galsearch=75"\n', 'url = url + "&action=Search+Exposures"\n', '\n', 'print url\n', '\n', '# retrieve URL and  write results to filename\n', '\n', 'filename = "out_py.txt"\n', '\n', 'urllib.urlretrieve(url,filename)\n', '\n', '### Done!\n', '\n', 'Donated by Martin Still from the Kepler GO Office: Extracts metadata from the Kepler archive. A shell command like this: KepInvestigationAtMAST.py --invid=STKL --quarter=1 will list all quarter 1 data ingested so far from the KASC LC program. One can use this in a cron job to monitor the incremental ingestion of GO data after each quarter and notify the GOs when their data is available. it can also be used to track data release dates.\n', '\n', '#!/usr/bin/env python\n', '\n', 'import getopt, sys, urllib, time\n', '\n', 'def main():\n', '\n', '    status = 0\n', '\n', '# input arguments\n', '\n', '    try:\n', '    opts, args = getopt.getopt(sys.argv[1:],"h:iq",\n', '                   ["help","invid=","quarter="])\n', '    except getopt.GetoptError:\n', '    usage()\n', '    tree = False\n', '    for o, a in opts:\n', '    if o in ("-h", "--help"):\n', '        usage()\n', '    if o in ("-i", "--invid"):\n', '        invid = str(a)\n', '    if o in ("-q", "--quarter"):\n', '        quarter = int(a)\n', '\n', '    kepid, invid, kepmag, mode, start, stop, release = GetMetaData(invid,quarter)\n', '\n', '# convert Gregorian date to Julian date\n', '\n', 'def Greg2JD(year, month, day):\n', '\n', '    if (month < 3):\n', '        y = float(year) - 1.0\n', '        m = float(month) + 12.0\n', '    else:\n', '        y = float(year)\n', '        m = float(month)\n', '    a = 0; b = 0\n', '    if (y + m / 12 + float(day) / 365 > 1582.87166):\n', '        a = int(y / 100)\n', '        b = 2 - a + int(float(a / 4))\n', '    c = 0\n', '    if (y < 0.0):\n', '        c = int(365.25 * y - 0.75)\n', '    else:\n', '        c = int(365.25 * y)\n', '    d = int(30.6001 * (m + 1))\n', '    jd = float(b + c + d + day + 1720994.5);\n', '\n', '    return jd\n', '\n', '# start and stop Julian dates for Kepler quarters\n', '\n', 'def QuarterDates(quarter):\n', '\n', '    Qstart = [2454953.5,2454964.5,2454998.5]\n', '    Qstop  = [2454962.5,2454997.5,2455100.5]\n', '    if (quarter < len(Qstart)):\n', '        return Qstart[quarter] - 10, Qstop[quarter] + 10\n', '    else:\n', "        message  = 'No spacecraft roll dates recorded for quarter ' + str(quarter) + '.\\n'\n", "        message += 'Find an updated script at http://keplergo.arc.nasa.gov'\n", '        sys.exit(message)\n', '\n', 'def GetMetaData(invid,quarter):\n', '\n', '# get start and stop dates for quarter\n', '\n', '    Qstart, Qstop = QuarterDates(quarter)']
